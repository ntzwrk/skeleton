extern crate hyper;
extern crate hyper_native_tls;

use std::io::Read;
use std::iter::Iterator;

use hyper::Client;
use hyper::net::HttpsConnector;
use hyper::Error;
use hyper_native_tls::NativeTlsClient;

pub fn get_gitignore(targets: &Vec<String>) -> Result<String, hyper::Error> {
    let mut request = "https://www.gitignore.io/api/".to_string();
    for (i, target) in targets.iter().enumerate() {
        request.push_str(&target);

        // skip last ","
        if i != targets.len() - 1 {
            request.push_str(",");
        }
    }

    let ssl = NativeTlsClient::new().unwrap();
    let con = HttpsConnector::new(ssl);
    let client = Client::with_connector(con);
    let url = request.parse::<hyper::Url>().unwrap();
    let req = client.get(url);
    let mut resp = match req.send() {
        Ok(r) => r,
        Err(err) => return Err(err),
    };

    let mut body = String::new();
    match resp.read_to_string(&mut body) {
        Ok(_) => {}
        Err(e) => return Err(Error::from(e)),
    };
    Ok(body)
}

#[test]
fn test_get_gitignore() {
    let expected = "
# Created by https://www.gitignore.io/api/rust

### Rust ###
# Generated by Cargo
# will have compiled files and executables
/target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# End of https://www.gitignore.io/api/rust
";
    let actual = get_gitignore(&vec!["rust".to_string()]).unwrap();
    assert_eq!(expected.to_string(), actual);
}
